from rest_framework.decorators import api_view, renderer_classes
from rest_framework.response import Response
from .renderers import UserRenderer

@api_view(['GET'])
@renderer_classes([UserRenderer, JSONRenderer])
def my_functional_view(request):
    data = {'message': 'Hello, world!'}
    return Response(data, status=200)





from django.contrib.auth.tokens import PasswordResetTokenGenerator
from django.http import HttpResponseRedirect
from django.utils.http import urlsafe_base64_decode, urlsafe_base64_encode
from django.utils.encoding import smart_str
from django.urls.base import reverse_lazy
from django.core.exceptions import ObjectDoesNotExist
from rest_framework import generics, status
from rest_framework.response import Response
import os

from .models import User
from .serializers import SetNewPasswordSerializer

class PasswordTokenCheckAPI(generics.GenericAPIView):
    serializer_class = SetNewPasswordSerializer

    def get(self, request, uidb64, token):
        # Get the redirect URL from the query parameter
        redirect_url = request.GET.get('redirect_url')

        # Get the frontend URL from the environment variables
        frontend_url = os.environ.get('FRONTEND_URL', '')

        try:
            # Decode the uidb64 to get the user ID
            id = smart_str(urlsafe_base64_decode(uidb64))

            # Fetch the user based on the decoded ID
            user = User.objects.get(id=id)

            # Check if the token is valid for the user
            if PasswordResetTokenGenerator().check_token(user, token):
                # If the token is valid
                if redirect_url:
                    # If a redirect URL is provided, redirect with success message and token data
                    return HttpResponseRedirect(f"{redirect_url}?token_valid=True&message=Credentials Valid&uidb64={uidb64}&token={token}")
                else:
                    # If no redirect URL is provided, redirect to frontend with success message and token data
                    return HttpResponseRedirect(f"{frontend_url}?token_valid=True&message=Credentials Valid&uidb64={uidb64}&token={token}")
            else:
                # If the token is not valid
                if redirect_url:
                    # If a redirect URL is provided, redirect with failure message
                    return HttpResponseRedirect(f"{redirect_url}?token_valid=False")
                else:
                    # If no redirect URL is provided, redirect to frontend with failure message
                    return HttpResponseRedirect(f"{frontend_url}?token_valid=False")

        except (DjangoUnicodeDecodeError, ObjectDoesNotExist):
            # Handle decoding error or non-existing user
            return Response({'error': 'Token is not valid, please request a new one'}, status=status.HTTP_400_BAD_REQUEST)



class PasswordTokenCheckAPI(generics.GenericAPIView):
    serializer_class = SetNewPasswordSerializer

    def get(self, request, uidb64, token):
        redirect_url = request.GET.get('redirect_url')
        frontend_url = os.environ.get('FRONTEND_URL', '')

        try:
            id = smart_str(urlsafe_base64_decode(uidb64))
            user = User.objects.get(id=id)

            if PasswordResetTokenGenerator().check_token(user, token):
                if redirect_url:
                    return HttpResponseRedirect(f"{redirect_url}?token_valid=True&message=Credentials Valid&uidb64={uidb64}&token={token}")
                else:
                    return HttpResponseRedirect(f"{frontend_url}?token_valid=True&message=Credentials Valid&uidb64={uidb64}&token={token}")
            else:
                if redirect_url:
                    return HttpResponseRedirect(f"{redirect_url}?token_valid=False")
                else:
                    return HttpResponseRedirect(f"{frontend_url}?token_valid=False")

        except (DjangoUnicodeDecodeError, ObjectDoesNotExist):
            return Response({'error': 'Token is not valid, please request a new one'}, status=status.HTTP_400_BAD_REQUEST)